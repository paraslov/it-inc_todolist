{"version":3,"sources":["serviceWorker.ts","api/api.ts","api/todoLists_api.ts","features/CommonActions/commonAppActions.ts","utils/thunk-errors-handle.ts","features/Login/selectors.ts","utils/redux-utils.ts","api/tasks_api.ts","features/Login/Login.tsx","api/auth_api.ts","features/Login/auth_reducer.ts","features/Login/index.tsx","features/TodoLists/todolists_reducer.ts","features/TodoLists/TodoList/tasks_reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/App/selectors.ts","features/App/app_reducer.ts","features/App/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodoLists/selectors.ts","features/TodoLists/TodoLists.tsx","features/TodoLists/TodoList/TodoList.tsx","features/TodoLists/TodoList/Task/Task.tsx","features/TodoLists/index.tsx","features/App/App.tsx","store/rootReducer.ts","store/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","OperationResultCodes","instance","axios","create","baseURL","withCredentials","headers","todoListsAPI","get","then","res","data","title","post","id","delete","put","commonAppActions","setAppError","createAction","setAppStatus","thunkServerResponseError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","thunkServerCatchError","message","undefined","selectIsAuth","state","auth","isAuth","useAppDispatch","useDispatch","useActions","actions","useMemo","bindActionCreators","TaskStatuses","TaskPriorities","Login","console","log","useSelector","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","formikHelpers","a","authActions","login","rejected","payload","setFieldError","field","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","type","FormControlLabel","control","Checkbox","Button","variant","authAPI","createAsyncThunk","resultCode","Success","logout","authAsyncActions","slice","createSlice","name","initialState","reducers","setIsAuth","action","extraReducers","builder","addCase","fulfilled","authReducer","reducer","fetchTodoLists","todoLists","addTodoList","todoList","removeTodoList","_setTodoListStatus","todoListId","todoListStatus","changeTodoListTitle","todoListsAsyncActions","_changeTodoListFilter","index","findIndex","tl","filter","map","unshift","splice","tasksAPI","taskId","model","fetchTasks","tasks","items","addTask","task","removeTask","_setTaskStatus","taskStatus","updateTask","updatedTaskModel","startDate","priority","deadline","description","tasksAsyncActions","forEach","Object","keys","key","AddItemForm","React","memo","addNewItem","disabled","useState","newTaskTitle","setNewTaskTitle","setError","addNewItemCallback","useCallback","trim","onTaskTitleChange","e","currentTarget","value","onTaskTitleKeyEnterPress","position","width","helperText","onChange","onKeyPress","IconButton","onClick","top","right","marginLeft","AddCircle","fontSize","EditableSpan","editMode","setEditMode","newSpanTitle","setNewSpanTitle","onInputChange","onSpanDblClick","onInputBlur","onBlur","autoFocus","onDoubleClick","opacity","wordBreak","selectAppStatus","app","selectAppError","selectIsAppInitialized","isAppInitialized","initializeApp","appAsyncActions","appActions","appReducer","Alert","props","elevation","useStyles","makeStyles","theme","root","marginTop","spacing","ErrorSnackbar","classes","appSelectors","handleClose","event","reason","className","Snackbar","open","autoHideDuration","onClose","severity","selectTasks","selectTodoLists","TodoLists","demo","authSelectors","todoListsActions","addNewTodolist","newTodolistTitle","helpers","useEffect","padding","flexWrap","overflowX","TodoList","tasksActions","addNewTask","removeTodolist","changeTodolistTitle","setFilter","renderTodoListButton","text","marginRight","tasksForTodolist","t","Completed","New","tasksElements","Task","Paper","Delete","removeTaskCallback","changeTaskIsDone","changeTaskTitle","checked","todoListsSlice","tasksSlice","tasksReducer","todoListsReducer","App","appStatus","AppBar","height","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","left","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMW","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.44d109ae.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the store load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web store is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different store. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'api-key': '518b0738-7ca3-4f1f-b3b6-a549590182a8'\r\n    }\r\n})\r\n\r\n//* common api types: ===========================================================================================>>\r\n\r\nexport type TFieldError = {\r\n    field: string\r\n    error: string\r\n}\r\nexport type TOperationResult<D = {}> = {\r\n    resultCode: number\r\n    fieldsErrors?: TFieldError[]\r\n    messages: string[]\r\n    data: D\r\n}\r\n\r\n//* Result codes enum: ===========================================================================================>>\r\nexport enum OperationResultCodes {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\n","import {TOperationResult, instance} from './api';\r\n\r\nexport type TTodoList = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\nexport const todoListsAPI = {\r\n    fetchTodoLists() {\r\n        return instance.get<TTodoList[]>('todo-lists').then(res => res.data)\r\n    },\r\n    addTodoList(title: string) {\r\n        return instance.post<TOperationResult<{ item: TTodoList }>>('todo-lists', {title: title}).then(res => res.data)\r\n    },\r\n    removeTodoList(id: string) {\r\n        return instance.delete<TOperationResult>(`todo-lists/${id}`).then(res => res.data)\r\n    },\r\n    updateTodoList(id: string, title: string) {\r\n        return instance.put<TOperationResult>(`todo-lists/${id}`, {title: title}).then(res => res.data)\r\n    }\r\n}","import {createAction} from '@reduxjs/toolkit'\r\nimport {TResponseStatus} from '../App/app_reducer'\r\n\r\n\r\nconst setAppError = createAction<{ error: string | null }>('app/setAppError')\r\nconst setAppStatus = createAction<{ status: TResponseStatus }>('app/setAppStatus')\r\n\r\nexport const commonAppActions = {\r\n    setAppError,\r\n    setAppStatus\r\n}\r\n","import {TOperationResult} from '../api/api'\r\nimport {AxiosError} from 'axios'\r\nimport {commonAppActions} from '../features/CommonActions/commonAppActions'\r\n\r\n// simplified type for thunkAPI from createAsyncThunk.ts types:\r\n// BaseThunkAPI< S, E, D extends Dispatch = Dispatch, RejectedValue = undefined, RejectedMeta = unknown, FulfilledMeta = unknown>\r\ntype TSimplifiedThunkAPI = {\r\n    dispatch: Function\r\n    getState: Function\r\n    extra: any\r\n    requestId: string\r\n    signal: AbortSignal\r\n    rejectWithValue: Function\r\n    fulfillWithValue: Function\r\n}\r\n\r\nconst {setAppStatus, setAppError} = commonAppActions\r\n\r\nexport const thunkServerResponseError = <D>(data: TOperationResult<D>, thunkAPI: TSimplifiedThunkAPI, showError = true) => {\r\n    showError && thunkAPI.dispatch(setAppError({error: data.messages.length ? data.messages[0] : 'some error occurred'}))\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\r\n}\r\n\r\nexport const thunkServerCatchError = (error: AxiosError, thunkAPI: TSimplifiedThunkAPI, showError = true) => {\r\n    showError && thunkAPI.dispatch(setAppError({error: error.message ? error.message : 'some error occurred'}))\r\n    thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n    return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n}","import {TAppState} from '../../store/types'\r\n\r\n\r\nexport const selectIsAuth = (state: TAppState) => state.auth.isAuth","import {useDispatch} from 'react-redux'\r\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux'\r\nimport {useMemo} from 'react'\r\nimport {TAppDispatch} from '../store/types'\r\n\r\nexport const useAppDispatch = () => useDispatch<TAppDispatch>()\r\n\r\n// useActions hook to use actions without dispatch\r\nexport function useActions<T extends ActionCreatorsMapObject>(actions: T) {\r\n    const dispatch = useDispatch()\r\n\r\n    const boundActions = useMemo(() => {\r\n        return bindActionCreators(actions, dispatch)\r\n    }, [])\r\n\r\n    return boundActions\r\n}","import {TOperationResult, instance} from './api';\r\n\r\n\r\nexport type TTask = {\r\n    description: string\r\n    title: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTasksResponseType = {\r\n    items: TTask[]\r\n    error: string\r\n    totalCount: number\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TTaskUpdateModel = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\nexport const tasksAPI = {\r\n    fetchTasks(todoListId: string) {\r\n        return instance.get<GetTasksResponseType>(`todo-lists/${todoListId}/tasks`).then(res => res.data)\r\n    },\r\n    addTask(todoListId: string, title: string) {\r\n        return instance.post<TOperationResult<{ item: TTask }>>(`todo-lists/${todoListId}/tasks`, {title: title})\r\n            .then(res => res.data)\r\n    },\r\n    removeTask(todoListId: string, taskId: string) {\r\n        return instance.delete<TOperationResult>(`todo-lists/${todoListId}/tasks/${taskId}`).then(res => res.data)\r\n    },\r\n    updateTask(todoListId: string, taskId: string, model: TTaskUpdateModel) {\r\n        return instance.put<TOperationResult<{ item: TTask }>>\r\n        (`todo-lists/${todoListId}/tasks/${taskId}`, model).then(res => res.data)\r\n    }\r\n}","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikErrors, useFormik} from 'formik'\r\nimport {TLoginParams} from '../../api/auth_api'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectIsAuth} from './selectors'\r\nimport {useAppDispatch} from '../../utils/redux-utils'\r\nimport {authActions} from './index'\r\n\r\nexport const Login = () => {\r\n    console.log('LOGIN rendered')\r\n\r\n    const dispatch = useAppDispatch()\r\n    const isAuth = useSelector(selectIsAuth)\r\n\r\n    //* ======================================================================================== Validation ==========>>\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: string\r\n    }\r\n    const validate = (values: TLoginParams) => {\r\n        const errors: FormikErrors<FormikErrorType> = {}\r\n        if (!values.email) {\r\n            errors.email = 'Required'\r\n        } else if (values.email.length > 20 || values.email.length < 7) {\r\n            errors.email = 'Must be 6-20 characters'\r\n        }\r\n        // } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        //     errors.email = 'Enter valid email'\r\n        // }\r\n\r\n        if (!values.password) {\r\n            errors.password = 'Required'\r\n        } else if (values.password.length > 20 || values.password.length < 7) {\r\n            errors.password = 'Must be 6-20 characters'\r\n        }\r\n        return errors;\r\n    };\r\n\r\n    //* ======================================================================================== Formik ==============>>\r\n    const formik = useFormik<TLoginParams>({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        validate,\r\n        onSubmit: async (values,formikHelpers) => {\r\n            let res = await dispatch(authActions.login({data: values}))\r\n            if(authActions.login.rejected.match(res)) {\r\n                if(res.payload?.fieldsErrors?.length) {\r\n                    const error = res.payload.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                }\r\n            }\r\n        },\r\n    });\r\n\r\n    // if user authorized - redirect to main page\r\n    if (isAuth) return <Redirect to={'/'}/>\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label={'Email'}\r\n                            margin={'normal'}\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type={'password'}\r\n                            label={'Password'}\r\n                            margin={'normal'}\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import {instance, TOperationResult} from './api';\r\n\r\n\r\nexport type TLoginParams = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\ntype TAuthMeResponse = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport const authAPI = {\r\n    login(data: TLoginParams) {\r\n        return instance.post<TOperationResult<{userId: number}>>('auth/login', data).then(res => res.data)\r\n    },\r\n    logout() {\r\n        return instance.delete<TOperationResult>('auth/login').then(res => res.data)\r\n    },\r\n    authMe() {\r\n        return instance.get<TOperationResult<TAuthMeResponse>>('auth/me').then(res => res.data)\r\n    }\r\n}","import {authAPI, TLoginParams} from '../../api/auth_api'\r\nimport {OperationResultCodes} from '../../api/api'\r\nimport {thunkServerCatchError, thunkServerResponseError} from '../../utils/thunk-errors-handle'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {commonAppActions} from '../CommonActions/commonAppActions'\r\nimport {TThunkApiConfigRejectedValue} from '../../store/types'\r\n\r\nconst {setAppStatus} = commonAppActions\r\n\r\n//* ============================================================================================ Thunk Creators ======>>\r\nconst login = createAsyncThunk<undefined, { data: TLoginParams }, TThunkApiConfigRejectedValue>\r\n('auth/login', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        let data = await authAPI.login(payload.data)\r\n        if (data.resultCode === OperationResultCodes.Success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nconst logout = createAsyncThunk('auth/logout', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        let data = await authAPI.logout()\r\n        if (data.resultCode === OperationResultCodes.Success) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const authAsyncActions = {login, logout}\r\n\r\n//* ====== Reducer ===================================================================================================>>\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isAuth: false\r\n    },\r\n    reducers: {\r\n        setIsAuth(state, action: PayloadAction<{ isAuth: boolean }>) {\r\n            state.isAuth = action.payload.isAuth\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(login.fulfilled, (state) => {\r\n            state.isAuth = true\r\n        })\r\n        builder.addCase(logout.fulfilled, (state) => {\r\n            state.isAuth = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsAuth} = slice.actions\r\n\r\n","import * as authSelectors from './selectors'\r\nimport {Login} from './Login'\r\nimport {authAsyncActions} from './auth_reducer'\r\nimport {slice} from './auth_reducer'\r\nimport {authReducer} from './auth_reducer'\r\n\r\nconst authActions = {\r\n    ...authAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nexport {\r\n    authReducer,\r\n    authActions,\r\n    authSelectors,\r\n    Login,\r\n}","import {todoListsAPI, TTodoList} from '../../api/todoLists_api'\r\nimport {TResponseStatus} from '../App/app_reducer'\r\nimport {thunkServerCatchError, thunkServerResponseError} from '../../utils/thunk-errors-handle'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {commonAppActions} from '../CommonActions/commonAppActions'\r\nimport {TThunkApiConfigRejectedValue} from '../../store/types'\r\nimport {authActions} from '../Login'\r\n\r\nconst {setAppStatus} = commonAppActions\r\n\r\n//* ====== Thunk Creators ============================================================================================>>\r\n\r\nconst fetchTodoLists = createAsyncThunk<{ todoLists: TTodoList[] }, undefined, TThunkApiConfigRejectedValue>\r\n('todoListReducer/fetchTodoLists', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        let data = await todoListsAPI.fetchTodoLists()\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todoLists: data}\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTodoList = createAsyncThunk<{ todoList: TTodoList }, { title: string }, TThunkApiConfigRejectedValue>\r\n('todoListReducer/addTodoList', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        const data = await todoListsAPI.addTodoList(payload.title)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoList: data.data.item}\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI, false)\r\n    }\r\n})\r\n\r\nconst removeTodoList = createAsyncThunk<{ todoListId: string }, { todoListId: string }, TThunkApiConfigRejectedValue>\r\n('todoListReducer/removeTodoList', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        thunkAPI.dispatch(_setTodoListStatus({todoListId: payload.todoListId, todoListStatus: 'loading'}))\r\n        const data = await todoListsAPI.removeTodoList(payload.todoListId)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {todoListId: payload.todoListId}\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        thunkAPI.dispatch(_setTodoListStatus({todoListId: payload.todoListId, todoListStatus: 'failed'}))\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\nconst changeTodoListTitle = createAsyncThunk<{ todoListId: string, title: string }, { todoListId: string, title: string }, TThunkApiConfigRejectedValue>('todoListReducer/changeTodoListTitle', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        thunkAPI.dispatch(_setTodoListStatus({todoListId: payload.todoListId, todoListStatus: 'loading'}))\r\n        const data = await todoListsAPI.updateTodoList(payload.todoListId, payload.title)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            thunkAPI.dispatch(_setTodoListStatus({todoListId: payload.todoListId, todoListStatus: 'succeeded'}))\r\n            return payload\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const todoListsAsyncActions = {fetchTodoLists, addTodoList, removeTodoList, changeTodoListTitle}\r\n\r\n//* ====== Reducer ===================================================================================================>>\r\n\r\nconst initState: Array<TTodoListDomain> = []\r\n\r\nexport const slice = createSlice({\r\n    name: 'todoListReducer',\r\n    initialState: initState,\r\n    reducers: {\r\n        _changeTodoListFilter(state, action: PayloadAction<{ todoListId: string, filter: TFilterValues }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        _setTodoListStatus(state, action: PayloadAction<{ todoListId: string, todoListStatus: TResponseStatus }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n            state[index].todoListStatus = action.payload.todoListStatus\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodoLists.fulfilled, (state, action) => {\r\n                return action.payload.todoLists.map(tl => ({...tl, filter: 'all', todoListStatus: 'idle'}))\r\n            })\r\n            .addCase(addTodoList.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todoList, filter: 'all', todoListStatus: 'idle'})\r\n            })\r\n            .addCase(removeTodoList.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n                if (index > -1) state.splice(index, 1)\r\n            })\r\n            .addCase(changeTodoListTitle.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.todoListId)\r\n                state[index].title = action.payload.title\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n                state.splice(0)\r\n            })\r\n    }\r\n})\r\n\r\nexport const {_changeTodoListFilter, _setTodoListStatus} = slice.actions\r\n\r\n//* ====== Types =====================================================================================================>>\r\nexport type TFilterValues = 'all' | 'completed' | 'active'\r\nexport type TTodoListDomain = TTodoList & {\r\n    filter: TFilterValues\r\n    todoListStatus: TResponseStatus\r\n}\r\n\r\n","import {todoListsAsyncActions} from '../todolists_reducer'\r\nimport {TaskPriorities, tasksAPI, TaskStatuses, TTask, TTaskUpdateModel} from '../../../api/tasks_api'\r\nimport {TResponseStatus} from '../../App/app_reducer'\r\nimport {thunkServerCatchError, thunkServerResponseError} from '../../../utils/thunk-errors-handle'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit'\r\nimport {commonAppActions} from '../../CommonActions/commonAppActions'\r\nimport {TThunkApiConfigRejectedValue} from '../../../store/types'\r\nimport {authActions} from '../../Login'\r\n\r\nconst {setAppStatus} = commonAppActions\r\n\r\n//* ============================================================================================== Thunk Creators ====>>\r\nconst fetchTasks = createAsyncThunk<{ todoListId: string, tasks: TTask[] }, { todoListId: string }, TThunkApiConfigRejectedValue>\r\n('tasksReducer/fetchTasks', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        const data = await tasksAPI.fetchTasks(payload.todoListId)\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todoListId: payload.todoListId, tasks: data.items}\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\nconst addTask = createAsyncThunk<{ task: TTask }, { todoListId: string, title: string }, TThunkApiConfigRejectedValue>\r\n('tasksReducer/addTask', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        const data = await tasksAPI.addTask(payload.todoListId, payload.title)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {task: data.data.item}\r\n        } else {\r\n            return thunkServerResponseError(data, thunkAPI, false)\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI, false)\r\n    }\r\n})\r\nconst removeTask = createAsyncThunk<{ todoListId: string, taskId: string }, { todoListId: string, taskId: string }, TThunkApiConfigRejectedValue>\r\n('tasksReducer/removeTask', async ({todoListId, taskId}, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        thunkAPI.dispatch(_setTaskStatus({todoListId, taskId, taskStatus: 'loading'}))\r\n        const data = await tasksAPI.removeTask(todoListId, taskId)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            thunkAPI.dispatch(_setTaskStatus({todoListId, taskId, taskStatus: 'succeeded'}))\r\n            return {todoListId, taskId}\r\n        } else {\r\n            thunkAPI.dispatch(_setTaskStatus({todoListId, taskId, taskStatus: 'failed'}))\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        thunkAPI.dispatch(_setTaskStatus({todoListId, taskId, taskStatus: 'failed'}))\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\nconst updateTask = createAsyncThunk<{ todoListId: string, taskId: string, model: TTaskUpdateModel },\r\n    { todoListId: string, task: TTask, model: TTaskUpdateDomainModel }, TThunkApiConfigRejectedValue>\r\n('tasksReducer/updateTask', async ({todoListId, task, model}, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        thunkAPI.dispatch(_setTaskStatus({todoListId, taskId: task.id, taskStatus: 'loading'}))\r\n        const updatedTaskModel: TTaskUpdateModel = {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            status: task.status,\r\n            ...model\r\n        }\r\n        const data = await tasksAPI.updateTask(todoListId, task.id, updatedTaskModel)\r\n        if (data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            thunkAPI.dispatch(_setTaskStatus({todoListId, taskId: task.id, taskStatus: 'succeeded'}))\r\n            return {todoListId, taskId: task.id, model: updatedTaskModel}\r\n        } else {\r\n            thunkAPI.dispatch(_setTaskStatus({todoListId, taskId: task.id, taskStatus: 'failed'}))\r\n            return thunkServerResponseError(data, thunkAPI)\r\n        }\r\n    } catch (error) {\r\n        thunkAPI.dispatch(_setTaskStatus({todoListId, taskId: task.id, taskStatus: 'failed'}))\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const tasksAsyncActions = {fetchTasks, addTask, removeTask, updateTask}\r\n\r\n//* ====== Reducer ===================================================================================================>>\r\nconst initState: TTasks = {}\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasksReducer',\r\n    initialState: initState,\r\n    reducers: {\r\n        _setTaskStatus(state, action: PayloadAction<{ todoListId: string, taskId: string, taskStatus: TResponseStatus }>) {\r\n            const index = state[action.payload.todoListId].findIndex(task => task.id === action.payload.taskId)\r\n            state[action.payload.todoListId][index].taskStatus = action.payload.taskStatus\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(todoListsAsyncActions.addTodoList.fulfilled, (state, action) => {\r\n                state[action.payload.todoList.id] = []\r\n            })\r\n            .addCase(todoListsAsyncActions.removeTodoList.fulfilled, (state, action) => {\r\n                delete state[action.payload.todoListId]\r\n            })\r\n            .addCase(todoListsAsyncActions.fetchTodoLists.fulfilled, (state, action) => {\r\n                action.payload?.todoLists.forEach(tl => state[tl.id] = [])\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                if (action.payload) {\r\n                    state[action.payload.todoListId] = action.payload.tasks.map(task => ({...task, taskStatus: 'idle'}))\r\n                }\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.task.todoListId].unshift({...action.payload.task, taskStatus: 'idle'})\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const index = state[action.payload.todoListId].findIndex(task => task.id === action.payload.taskId)\r\n                if (index > -1) state[action.payload.todoListId].splice(index, 1)\r\n            })\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const index = state[action.payload.todoListId].findIndex(task => task.id === action.payload.taskId)\r\n                if (index > -1) {\r\n                    state[action.payload.todoListId][index] =\r\n                        {...state[action.payload.todoListId][index], ...action.payload.model}\r\n                }\r\n            })\r\n            .addCase(authActions.logout.fulfilled, (state) => {\r\n                Object.keys(state).map(key => delete state[key])\r\n            })\r\n    }\r\n})\r\n\r\nexport const {_setTaskStatus} = slice.actions\r\n\r\n//* ======================================================================================================== Types ===>>\r\nexport type TTaskDomain = TTask & { taskStatus: TResponseStatus }\r\nexport type TTasks = { [key: string]: Array<TTaskDomain> }\r\n\r\n// type for updateTask thunk realization to use only those props user wants to update\r\nexport type TTaskUpdateDomainModel = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddCircle} from '@material-ui/icons';\r\n\r\nexport type TAddItemFormHelpers = {\r\n    setNewTaskTitle: (title: string) => void\r\n    setError: (error: string) => void\r\n}\r\n\r\nexport type TAddItemFormProps = {\r\n    disabled?: boolean\r\n    label: string\r\n    addNewItem: (newTaskTitle: string, helpers: TAddItemFormHelpers) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(({label, addNewItem, disabled = false}: TAddItemFormProps) => {\r\n    console.log('AIF R')\r\n    //* useState ===============================================================================================>\r\n    const [newTaskTitle, setNewTaskTitle] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    //* Callbacks for adding new task, onChange and keyPress events  ===========================================>\r\n    const addNewItemCallback = useCallback(() => {\r\n        if (newTaskTitle.trim() === '') {\r\n            setError('Title is required!')\r\n            return\r\n        }\r\n        addNewItem(newTaskTitle.trim(), {setNewTaskTitle, setError})\r\n    }, [newTaskTitle, addNewItem])\r\n    const onTaskTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) =>\r\n        setNewTaskTitle(e.currentTarget.value), [])\r\n    const onTaskTitleKeyEnterPress = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) setError('') // any key press to clear error\r\n        if (e.key === 'Enter') addNewItemCallback()\r\n    }, [error, addNewItemCallback])\r\n\r\n    return (\r\n        <div style={{position: 'relative', width: '280px'}}>\r\n            <TextField\r\n                style={{width: '230px'}}\r\n                disabled={disabled}\r\n                value={newTaskTitle}\r\n                label={label}\r\n                variant={'outlined'}\r\n                error={!!error}\r\n                helperText={error}\r\n                onChange={onTaskTitleChange}\r\n                onKeyPress={onTaskTitleKeyEnterPress}/>\r\n            <IconButton onClick={addNewItemCallback}\r\n                        style = {{position: 'absolute', top: '0', right: '-10px', marginLeft: '5px'}}\r\n                        disabled={disabled}>\r\n                <AddCircle fontSize={'large'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useCallback, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newSpanTitle: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo(({onChange, title, disabled = false}: EditableSpanPropsType) => {\r\n    console.log('ES R')\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [newSpanTitle, setNewSpanTitle] = useState('')\r\n\r\n    const onInputChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewSpanTitle(e.currentTarget.value)\r\n    }, [])\r\n\r\n    const onSpanDblClick = useCallback(() => {\r\n        if(disabled) return\r\n        setNewSpanTitle(title)\r\n        setEditMode(true)\r\n    }, [title, disabled])\r\n\r\n    const onInputBlur = useCallback(() => {\r\n        onChange(newSpanTitle)\r\n        setEditMode(false)\r\n    }, [onChange, newSpanTitle])\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <TextField\r\n                    value={newSpanTitle}\r\n                    onBlur={onInputBlur}\r\n                    onChange={onInputChange}\r\n                    autoFocus/> :\r\n                <span onDoubleClick={onSpanDblClick} style={{opacity: disabled ? '0.5' : undefined, wordBreak: 'break-word'}}>\r\n                    {title}\r\n                </span>\r\n            }\r\n        </>\r\n    )\r\n})","import {TAppState} from '../../store/types'\r\n\r\n\r\nexport const selectAppStatus = (state: TAppState) => state.app.status\r\nexport const selectAppError = (state: TAppState) => state.app.error\r\nexport const selectIsAppInitialized = (state: TAppState) => state.app.isAppInitialized","import {authAPI} from '../../api/auth_api'\r\nimport {OperationResultCodes} from '../../api/api'\r\nimport {thunkServerCatchError} from '../../utils/thunk-errors-handle'\r\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit'\r\nimport {setIsAuth} from '../Login/auth_reducer'\r\nimport {commonAppActions} from '../CommonActions/commonAppActions'\r\n\r\nconst {setAppStatus} = commonAppActions\r\n\r\n//* ============================================================================================ Thunk Creators ======>>\r\n\r\nconst initializeApp = createAsyncThunk('app/initializeApp', async (payload, thunkAPI) => {\r\n    try {\r\n        thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n        const data = await authAPI.authMe()\r\n        if (data.resultCode === OperationResultCodes.Success) {\r\n            thunkAPI.dispatch(setIsAuth({isAuth: true}))\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {isAppInitialized: true}\r\n        } else {\r\n            thunkAPI.dispatch(setAppStatus({status: 'failed'}))\r\n            return {isAppInitialized: true}\r\n        }\r\n    } catch (error) {\r\n        return thunkServerCatchError(error, thunkAPI)\r\n    }\r\n})\r\n\r\nexport const appAsyncActions = {initializeApp}\r\n\r\n//* ================================================================================================= Reducer ========>>\r\n\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        error: null as string | null,\r\n        status: 'idle' as TResponseStatus,\r\n        isAppInitialized: false,\r\n    },\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isAppInitialized = action.payload.isAppInitialized\r\n            })\r\n            .addCase(commonAppActions.setAppError, (state, action) => {\r\n                state.error = action.payload.error\r\n            })\r\n            .addCase(commonAppActions.setAppStatus, (state, action) => {\r\n                state.status = action.payload.status\r\n            })\r\n    }\r\n})\r\n\r\n\r\n//* ======================================================================================================== Types ===>>\r\nexport type TResponseStatus = 'idle' | 'loading' | 'succeeded' | 'failed'","import * as appSelectors from './selectors'\r\nimport {appAsyncActions} from './app_reducer'\r\nimport {slice} from './app_reducer'\r\n\r\nconst appActions = {\r\n    ...appAsyncActions,\r\n    ...slice.actions\r\n}\r\n\r\nconst appReducer = slice.reducer\r\n\r\nexport {\r\n    appReducer,\r\n    appSelectors,\r\n    appActions\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {makeStyles, Theme} from '@material-ui/core/styles'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {appSelectors} from '../../features/App'\r\nimport {commonAppActions} from '../../features/CommonActions/commonAppActions'\r\n\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2),\r\n        },\r\n    },\r\n}))\r\n\r\nexport function ErrorSnackbar() {\r\n    const classes = useStyles()\r\n\r\n    const dispatch = useDispatch()\r\n    const error = useSelector(appSelectors.selectAppError)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(commonAppActions.setAppError({error: null}))\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n                <Alert onClose={handleClose} severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </div>\r\n    );\r\n}","import {TAppState} from '../../store/types'\r\n\r\n\r\nexport const selectTasks = (state: TAppState) => state.tasks\r\nexport const selectTodoLists = (state: TAppState) => state.todoLists","import {useSelector} from 'react-redux'\r\nimport React, {useCallback, useEffect} from 'react'\r\nimport {Grid} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components'\r\nimport {TodoList, todoListsActions} from './index'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectTasks, selectTodoLists} from './selectors'\r\nimport {authSelectors} from '../Login'\r\nimport {TAddItemFormHelpers} from '../../components/AddItemForm/AddItemForm'\r\nimport {useActions, useAppDispatch} from '../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport function TodoLists({demo = false}: PropsType) {\r\n    console.log('TodoLists R')\r\n    const dispatch = useAppDispatch()\r\n    const isAuth = useSelector(authSelectors.selectIsAuth)\r\n\r\n    const {fetchTodoLists} = useActions(todoListsActions)\r\n\r\n    //* TodoLists data declaration section  =============================================================>\r\n    const todoLists = useSelector(selectTodoLists)\r\n\r\n    //* Tasks data declaration section =====================================================================>\r\n    const tasks = useSelector(selectTasks)\r\n\r\n    //* Callbacks for TodoLists management  ====================================================================>\r\n\r\n    const addNewTodolist = useCallback(async (newTodolistTitle: string, helpers: TAddItemFormHelpers) => {\r\n        let res = await dispatch(todoListsActions.addTodoList({title: newTodolistTitle}))\r\n\r\n        if(todoListsActions.addTodoList.rejected.match(res)) {\r\n            if(res.payload?.errors?.length) {\r\n                const error = res.payload.errors[0]\r\n                helpers.setError(error)\r\n            } else {\r\n                helpers.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helpers.setNewTaskTitle('')\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(demo || !isAuth) return\r\n        !todoLists.length && fetchTodoLists()\r\n    }, [])\r\n\r\n    if(!isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm label={'Add TODO list'} addNewItem={addNewTodolist}/>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2} style = {{flexWrap: 'nowrap', overflowX: 'scroll'}}>\r\n                {todoLists.map(tl => {\r\n                        return <Grid item key={tl.id}>\r\n                            <div style={{width: '300px'}}>\r\n                                <TodoList\r\n                                    demo = {demo}\r\n                                    todoList={tl}\r\n                                    tasks={tasks[tl.id]}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    }\r\n                )}\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm, EditableSpan} from '../../../components'\r\nimport {Button, IconButton, Paper} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task, tasksActions, todoListsActions} from '../index'\r\nimport {TFilterValues, TTodoListDomain} from '../todolists_reducer'\r\nimport {TaskStatuses} from '../../../api/tasks_api'\r\nimport {TTaskDomain} from './tasks_reducer'\r\nimport {TAddItemFormHelpers} from '../../../components/AddItemForm/AddItemForm'\r\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils'\r\n\r\n//* Types declaration ================================================================================================>>\r\nexport type TodolistPropsType = {\r\n    demo?: boolean\r\n    todoList: TTodoListDomain\r\n    tasks: Array<TTaskDomain>\r\n}\r\n\r\nexport const TodoList = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('TL R')\r\n    const {fetchTasks} = useActions(tasksActions)\r\n    const {removeTodoList, _changeTodoListFilter, changeTodoListTitle} = useActions(todoListsActions)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if(demo) return\r\n        !props.tasks.length && fetchTasks({todoListId: props.todoList.id})\r\n    }, [])\r\n\r\n    //* Callbacks for EditableSpan, AddItemForm and Buttons callbacks  ===============================================>>\r\n\r\n    const addNewTask = useCallback(async (newTaskTitle: string, helpers: TAddItemFormHelpers) => {\r\n        let res = await dispatch(tasksActions.addTask({todoListId: props.todoList.id, title: newTaskTitle}))\r\n\r\n        if(tasksActions.addTask.rejected.match(res)) {\r\n            if(res.payload?.errors?.length) {\r\n                const error = res.payload.errors[0]\r\n                helpers.setError(error)\r\n            } else {\r\n                helpers.setError('Some error occurred')\r\n            }\r\n        } else {\r\n            helpers.setNewTaskTitle('')\r\n        }\r\n\r\n    }, [props.todoList.id])\r\n    const removeTodolist = useCallback(() =>\r\n        removeTodoList({todoListId: props.todoList.id}), [props.todoList.id])\r\n    const changeTodolistTitle = useCallback((newTodolistTitle: string) =>\r\n        changeTodoListTitle({title: newTodolistTitle, todoListId: props.todoList.id}), [props.todoList.id])\r\n    const setFilter = useCallback((filter: TFilterValues) =>\r\n        _changeTodoListFilter({todoListId: props.todoList.id, filter}), [props.todoList.id])\r\n\r\n    const renderTodoListButton = useCallback((filter: TFilterValues, text: string) => {\r\n        return <Button variant={props.todoList.filter === filter ? 'contained' : 'outlined'}\r\n                       color={props.todoList.filter === filter ? 'primary' : 'default'}\r\n                       style={{marginRight: '5px'}}\r\n                       onClick={() => setFilter(filter)}>{text}\r\n        </Button>\r\n    }, [props.todoList.filter])\r\n\r\n    //* TodoList filters logic ======================================================================================>\r\n    let tasksForTodolist = props.tasks\r\n    if (props.todoList.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (props.todoList.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    //* <li> elements mapping for tasks <ul> list ===================================================================>\r\n    const tasksElements = tasksForTodolist\r\n        .map(task => <Task key={task.id} task={task} disabled={task.taskStatus === 'loading'}/>)\r\n\r\n    return (\r\n        <Paper style={{padding: '10px', position: 'relative'}}>\r\n            <IconButton onClick={removeTodolist}\r\n                        style = {{position: 'absolute', top: '-5px', right: '-5px'}}\r\n                        disabled={props.todoList.todoListStatus === 'loading'}>\r\n                <Delete fontSize = {'small'}/>\r\n            </IconButton>\r\n            <h3 style={{width: '260px'}}>\r\n                <EditableSpan title={props.todoList.title} onChange={changeTodolistTitle}/>\r\n            </h3>\r\n            <AddItemForm label={'Add task'} addNewItem={addNewTask} disabled = {props.todoList.todoListStatus === 'loading'}/>\r\n            <div>\r\n                {tasksElements.length ? tasksElements : <div style={{padding: '10px', opacity: '0.5'}}>No tasks</div>}\r\n            </div>\r\n            <div>\r\n                {renderTodoListButton('all', 'All')}\r\n                {renderTodoListButton('active', 'Active')}\r\n                {renderTodoListButton('completed', 'Completed')}\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\n","import React, {useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses} from '../../../../api/tasks_api'\r\nimport {TTaskDomain} from '../tasks_reducer'\r\nimport {tasksActions} from '../../index'\r\nimport {useActions} from '../../../../utils/redux-utils'\r\n\r\n//* Types declaration ================================================================================================>>\r\nexport type TaskPropsType = {\r\n    task: TTaskDomain\r\n    disabled?: boolean\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {removeTask, updateTask} = useActions(tasksActions)\r\n\r\n    //* Callbacks  ===================================================================================================>>\r\n    const removeTaskCallback = useCallback(() => removeTask({todoListId: props.task.todoListId, taskId: props.task.id}), [])\r\n    const changeTaskIsDone = useCallback(() =>\r\n        updateTask({\r\n            todoListId: props.task.todoListId,\r\n            task: props.task,\r\n            model: {status: props.task.status === TaskStatuses.New ? TaskStatuses.Completed : TaskStatuses.New}\r\n        }), [props.task.todoListId, props.task, props.task.status])\r\n    const changeTaskTitle = useCallback((newTaskTitle: string) => {\r\n        updateTask({todoListId: props.task.todoListId, task: props.task, model: {title: newTaskTitle}})\r\n    }, [props.task.todoListId, props.task])\r\n\r\n    return (\r\n        <div style={{opacity: props.task.status === TaskStatuses.Completed ? 0.5 : 1, position: 'relative'}}\r\n             key={props.task.id}>\r\n            <Checkbox onChange={changeTaskIsDone}\r\n                      disabled={props.disabled}\r\n                      color={'primary'}\r\n                      checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan title={props.task.title} onChange={changeTaskTitle} disabled={props.disabled}/>\r\n            <IconButton onClick={removeTaskCallback}\r\n                        style = {{position: 'absolute', top: '0', right: '-17px'}}\r\n                        disabled={props.disabled}>\r\n                <Delete fontSize={'small'}/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import {todoListsAsyncActions, slice as todoListsSlice} from './todolists_reducer'\r\nimport {tasksAsyncActions, slice as tasksSlice} from './TodoList/tasks_reducer'\r\nimport {TodoLists} from './TodoLists'\r\nimport {TodoList} from './TodoList/TodoList'\r\nimport {Task} from './TodoList/Task/Task'\r\n\r\nconst todoListsActions = {\r\n    ...todoListsAsyncActions,\r\n    ...todoListsSlice.actions\r\n}\r\n\r\nconst tasksActions = {\r\n    ...tasksAsyncActions,\r\n    ...tasksSlice.actions\r\n}\r\n\r\nconst tasksReducer = tasksSlice.reducer\r\nconst todoListsReducer = todoListsSlice.reducer\r\n\r\nexport {\r\n    todoListsReducer,\r\n    tasksReducer,\r\n    todoListsActions,\r\n    tasksActions,\r\n    TodoLists,\r\n    TodoList,\r\n    Task\r\n}","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodoLists} from '../TodoLists'\r\nimport {ErrorSnackbar} from '../../components'\r\nimport {useSelector} from 'react-redux'\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport {authActions, Login} from '../Login'\r\nimport {selectAppStatus, selectIsAppInitialized} from './selectors'\r\nimport {appActions} from './index'\r\nimport {useActions} from '../../utils/redux-utils'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    console.log('APP R')\r\n    const appStatus = useSelector(selectAppStatus)\r\n    const isAppInitialized = useSelector(selectIsAppInitialized)\r\n\r\n    const {logout} = useActions(authActions)\r\n    const {initializeApp} = useActions(appActions)\r\n\r\n    useEffect(() => {\r\n        if(!isAppInitialized) initializeApp()\r\n        console.log('shoot')\r\n    }, [])\r\n\r\n    if(!isAppInitialized) return <div style={{position: 'fixed', top: '40%', left: '40%'}}>\r\n        <CircularProgress style={{width: '100px'}} />\r\n    </div>\r\n\r\n    return (\r\n        <div className=\"App\">\r\n                <AppBar position=\"static\" style={{height: '50px'}}>\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        <Button color=\"inherit\" onClick={() => logout()}>Log out</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <div style={{height: '5px'}}>\r\n                    {appStatus === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n                </div>\r\n                <Container fixed>\r\n                    <Switch>\r\n                        <Route exact path={'/'} render={() => <TodoLists demo={demo} />} />\r\n                        <Route path={'/login'} render={() => <Login />} />\r\n                        <Route path={'/404'} render={() => <h1>404 NOT FOUND</h1>} />\r\n                        <Redirect from={'*'} to={'/404'} />\r\n                    </Switch>\r\n                </Container>\r\n                <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers} from 'redux'\r\nimport {tasksReducer, todoListsReducer} from '../features/TodoLists'\r\nimport {appReducer} from '../features/App'\r\nimport {authReducer} from '../features/Login'\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})","import thunkMW from 'redux-thunk'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport {rootReducer} from './rootReducer'\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMW)\r\n})\r\n\r\nif (process.env.NODE_ENV === 'development' && module.hot) {\r\n    module.hot.accept('./rootReducer', () => {\r\n        store.replaceReducer(rootReducer)\r\n    })\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './features/App/App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './store/store'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\n\r\nReactDOM.render(<Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>\r\n    , document.getElementById('root'))\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()"],"sourceRoot":""}